!BAT

:: Call the subroutine specified as first parameter of the script
if "%1"=="findDLL" goto :findDLL
if "%1"=="findWinVer" goto :findWinVer
if "%1"=="isWinDir" goto :isWinDir
if "%1"=="patchUnpatch" goto :patchUnpatch
if "%1"=="patchDLL" goto :patchDLL
if "%1"=="unPatchDLL" goto :unPatchDLL
if "%1"=="help" goto :help


delmod -l wenv > nul || insmod /wenv > nul || pause ERROR: Cannot find file wenv! && configfile /menu.lst
delmod -l %~nx0 > nul  || insmod %0 > nul  || pause WARNING: %~nx0 name too long for insmod && configfile /menu.lst
debug off


set dll = /system32/msv1_0.dll
set osDrv = (md)0x2000+2
set patchDrv = (md)0x2300+2
set devDrv = (md)0x2500+2
set dirDrv = (md)0x5800+80
echo -e \x0 > %osDrv%		## Initialize mem drive


# Clear memory in case it contains bytes that look like a compressed file header!
echo ffffffffffffff > %osDrv%
echo ffffffffffffff > %patchDrv%
echo ffffffffffffff > %devDrv%
echo ffffffffffffff > %dirDrv%


:: Find Windows installations

:: Attempt to auto-detect Windows installation
if "%1"=="BOOTDEV" goto :autoDetect
if not "%1"=="" goto :forceDetect
:autoDetect
:: If debug is off, nothing is written to memdrive
:: If debug is on, output is too verbose
:: So, set debug to normal and turn it off immediately after
debug normal
find --devices=h > %devDrv%
debug off
set /a skip = 0
:autoLoop
cat --locate=\x0a --number=1 --skip=%skip% %devDrv% > nul || goto :displayMenu
set /a length = %?% - %skip%
cat --skip=%skip% --length=%length% %devDrv% | set dev =
set /a skip = %length% + %skip% + 1
if "%1"=="BOOTDEV" goto :skipBoot
if "%?_BOOT:~0,4%"=="%dev:~0,4%" goto :autoLoop		## Prevents searching boot device
:skipBoot
echo Checking %dev%...
call %~pnx0 findDLL %dev%
goto :autoLoop


:: Force detection of Windows installation
:forceDetect
errorcheck off
wenv for /L %p in (0,1,%1) do for /L %q in (0,1,%2) do exec %0 findDLL %p %q		## Blindly try to iterate over HD partitions
errorcheck on


:displayMenu
if "%os%"==""  echo No Windows installation found!	&& pause && goto :EOF
## Display Windows installations found
echo -e \ntitle Back to Main Menu \nconfigfile /menu.lst >> %osDrv%
echo -e \x0 >> %osDrv%	## EOF marker for configfile
configfile %osDrv%
goto :EOF


:: =======================  SUBROUTINES  =======================


:: Searches for msv1_0.dll, %1 = findDLL, %2 = Disk#, %3 = Partition#
:findDLL
set dllRoot = %2
if not "%dllRoot:~0,1%"=="(" set dllRoot = (hd%2,%3)
# Turn errorcheck OFF to prevent the script aborting while probing dummy partition
errorcheck off
wenv dir %dllRoot%/ > %dirDrv%
wenv for /f %i in ( %dirDrv% ) do exec %0 isWinDir %i
errorcheck on
goto :EOF


:: Checks if the directory contains Windows installation, %1 = isWinDir, %2 = Directory
:isWinDir
set dllPath = %dllRoot%/%2%dll%
cat --length=0 %dllPath% || goto :EOF	## Don't proceed further for non-existent partitions
:: Start forming menu items
set grubMenu = \ntitle Windows
:: Check for Windows version based on Major and Minor version no. of msv1_0.dll
call %0 findWinVer %dllPath%
set grubMenu = %grubMenu% %os% at %dllRoot%/%2 \ncall %0 patchUnpatch %dllRoot% %2 \npause \nboot
echo -e %grubMenu% >> %osDrv%			## Write configfile to mem drive
goto :EOF


:: Find version of Windows installed
:: This batch should print the version of
:: .dll's tested on 32-bit ONLY
:: You must provide a fully qualified path as parameter.
:: Example: (hd0,0)/Windows/System32/msv1_0.dll
:: or a valid relative path from current ROOT:
:: /Windows/System32/msv1_0.dll
:findWinVer
# String is "FileV" in Unicode
set file=%~dpnx2
set string=\x01\x00\x46\x00\x69\x00\x6C\x00\x65\x00\x56\x00
set version=
set char=

cat --hex --locate=%string% %file% > nul
set /a offbase = %?% + 27 > nul

set /a counter=1 > nul
:loop
set /a figure=0 > nul
set /a offset=%offbase%+%counter% > nul
cat --skip=%offset% --length=1 %file% | set char=

:floop
if "%char%"=="%figure%" set version=%version%%%char%
set /a figure=%figure%+1 > nul
if "%figure%"=="10" goto :fnext
goto :floop

:fnext
if "%char%"=="." set version=%version%%%char%
set /a counter=%counter%+1 > nul
if "%counter%"=="30" goto :next
goto :loop

:next
set majmin=%version:~0,3%
set os=(Unknown)
if "%majmin%"=="5.0" set os=2000
if "%majmin%"=="5.1" set os=XP
if "%majmin%"=="5.2" set os=XP 64-bit or Server 2003
if "%majmin%"=="6.0" set os=Vista or Server 2008
if "%majmin%"=="6.1" set os=7 or Server 2008 R2
if "%majmin%"=="6.2" set os=8 or Server 2012
if "%majmin%"=="6.3" set os=8.1 or Server 2012 R2
goto :EOF


:: Patch or Unpatch?
:patchUnpatch
echo -e iftitle [if exist (bd)/PassPass.bak] Backup %2/%3%dll% \\nBackup to \\\\PassPass.bak \ndd if=%2/%3%dll% of=(bd)/PassPass.bak \nif not "%^?%"=="0x0" pause \nconfigfile %patchDrv% > %patchDrv%
echo -e iftitle [if exist (bd)/PassPass.bak] Restore %2/%3%dll% \\nRestore from \\\\PassPass.bak \ndd of=%2/%3%dll% if=(bd)/PassPass.bak \nif "%?%"=="1" pause \nconfigfile %patchDrv% >> %patchDrv%
echo -e title Patch Windows on %2\\\\%3 \\n \ncall %0 patchDLL %2 %3 \npause \nconfigfile %patchDrv% >> %patchDrv%
echo -e title UnPatch Windows on %2\\\\%3 \\n \ncall %0 unPatchDLL %2 %3 \npause \nconfigfile %patchDrv% >> %patchDrv%
echo -e title Back to OS detection menu \nconfigfile %osDrv% \npause \nconfigfile %osDrv% >> %patchDrv%
echo -e title Boot from Internal HDD \nif "%^?_BOOT:~0,3%"=="(hd" map (hd0) (hd1)\nif "%^?_BOOT:~0,3%"=="(hd" map (hd1) (hd0) \nif "%^?_BOOT:~0,3%"=="(hd" map --hook \nchainloader (hd0)+1 >> %patchDrv%
echo -e \x0 >> %patchDrv%			## EOF marker for configfile
configfile %patchDrv%
goto :EOF


:: Patches DLL file, %1 = patchDLL, %2 = (hdX,Y), %3 = WinDir
:patchDLL
set dllPath = %2/%3%dll%
call %0 findWinVer %dllPath%						# Check Windows version
cat --locate=\x64\x86 --number=1 %dllPath% > nul	# Check for 0x6486 to identify 64-bit PE
if "%@retval%"=="1" goto :64BitPatch

:32BitPatch
set patt=\x83\xF8\x10
set rpatt=\x33\xC0\x90
if "%majmin%"=="6.2" set patt=\x3B\xC6\x75\x13 && set rpatt=\x33\xC0\x75\x13
if "%majmin%"=="6.3" set patt=\x4d\x3b\xc6\x0F\x85 && set rpatt=\x4d\x33\xc0\x0F\x85
goto :DoPatch

:64BitPatch
set patt=\x48\x3B\xC6\x0F\x85
set rpatt=\x33\xC0\x90\x0F\x85
if "%majmin%"=="6.2" set patt=\x49\x3B\xC6\x0F\x85 && set rpatt=\x33\xC0\x90\x0F\x85
if "%majmin%"=="6.3" set patt=\x49\x3B\xC6\x0F\x85 && set rpatt=\x33\xC0\x90\x0F\x85

:DoPatch
:: Check whether we can unpatch
cat --locate=%rpatt% --number=1 %dllPath% > nul
if "%@retval%"=="1" goto :warnUserP
cat --hex --locate=%patt% --replace=%rpatt% %dllPath% > nul
if "%@retval%"=="0" goto :warnUserP
echo DLL at %dllPath% patched
goto :EOF

:warnUserP
pause This DLL is not compatible or has been already been patched
configfile %osDrv%
goto :EOF


:: Unpatches DLL file, %1 = patchDLL, %2 = (hdX,Y), %3 = WinDir
:unPatchDLL
set dllPath = %2/%3%dll%
call %0 findWinVer %dllPath%						# Check Windows version
cat --locate=\x64\x86 --number=1 %dllPath% > nul	# Check for 0x6486 to identify 64-bit PE
if "%@retval%"=="1" goto :64BitUnpatch

:32BitUnpatch
set patt=\x83\xF8\x10
set rpatt=\x33\xC0\x90
if "%majmin%"=="6.2" set patt=\x3B\xC6\x75\x13 && set rpatt=\x33\xC0\x75\x13
if "%majmin%"=="6.3" set patt=\x4d\x3b\xc6\x0F\x85 && set rpatt=\x4d\x33\xc0\x0F\x85
goto :DoUnpatch

:64BitUnpatch
set patt=\x48\x3B\xC6\x0F\x85
set rpatt=\x33\xC0\x90\x0F\x85
if "%majmin%"=="6.2" set patt=\x49\x3B\xC6\x0F\x85 && set rpatt=\x33\xC0\x90\x0F\x85
if "%majmin%"=="6.3" set patt=\x49\x3B\xC6\x0F\x85 && set rpatt=\x33\xC0\x90\x0F\x85

:DoUnpatch
cat --hex --locate=%rpatt% --replace=%patt% %dllPath% > nul
if "%@retval%"=="0" goto :warnUserU
echo DLL at %dllPath% unpatched
goto :EOF

:warnUserU
pause This DLL is not compatible or has been already been unpatched
configfile %osDrv%
goto :EOF


:help
echo -e \nPassPass v1.2 - Idea by jaclaz, Coded by Sherlock
echo Released under the jaclaz's CAREWARE license
echo -e \nUsage: PassPass.g4b [BOOTDEV] | [<MaxDisk#> <MaxPartition#>]\n
echo By default, PassPass tries to search for Windows installations
echo on all but boot device. BOOTDEV switch makes PassPass search boot media, too.
echo If autodetection fails, provide MaxDisk# and MaxPartition# 
echo to forcedetect and guide the script manually 
echo PassPass.g4b script and WENV binary need to be
echo present on the root of the boot media.