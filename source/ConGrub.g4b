!BAT

errorcheck off
debug off
insmod wenv > nul
insmod %0 > nul


:: Call the subroutine specified as first parameter of the script
if "%1"=="findDLL" goto :findDLL
if "%1"=="isWinDir" goto :isWinDir
if "%1"=="patchDLL" goto :patchDLL
if "%1"=="readByte" goto :readByte
if "%1"=="help" goto :help


:: Relative path of the DLL to be patched
set dll = /system32/msv1_0.dll	
set confDrv = (md)0x2000+1
set dirDrv = (md)0x5800+80
set osFound =
echo -e \x0 > %confDrv%		## Initialize mem drive


:: Find Windows installations

:: Attempt to auto-detect Windows installation
if not "%1"=="" goto :forceDetect
:: If debug is off, nothing nothing is written to output
:: If debug is on, output is too verbose
:: So, set debug to normal and turn it off immediately after
debug normal
find --devices=h > %confDrv%
debug off
set /a skip = 0
:autoLoop
cat --locate=\x0a --number=1 --skip=%skip% %confDrv% || goto :displayMenu
set /a length = %?% - %skip%
cat --skip=%skip% --length=%length% %confDrv% | set dev =
set /a skip = %length% + %skip% + 1
call %0 findDLL %dev%
goto :autoLoop


:: Force detection of Windows installation
:forceDetect
wenv for /L %p in (0,1,%1) do for /L %q in (0,1,%2) do exec %0 findDLL %p %q		## Iterate over HD partitions


:displayMenu
if "%osFound%"==""  echo No Windows installation found!	&& pause && goto :EOF		## Display Windows installations found
echo -e \ntitle Back to Main Menu \nconfigfile /menu.lst \nboot >> %confDrv%
echo -e \x0 >> %confDrv%	## EOF marker for configfile
configfile %confDrv%
goto :EOF


:: =======================  SUBROUTINES  =======================


:: Searches for msv1_0.dll, %1 = findDLL, %2 = Disk#, %3 = Partition#
:findDLL
set dllRoot = %2
if not "%dllRoot:~0,1%"=="(" set dllRoot = (hd%2,%3)
wenv dir %dllRoot%/ > %dirDrv%
wenv for /f %i in ( %dirDrv% ) do exec %0 isWinDir %i
goto :EOF


:: Checks if the directory contains Windows installation, %1 = isWinDir, %2 = Directory
:isWinDir
set dllPath = %dllRoot%/%2%dll%
cat --length=0 %dllPath% || goto :EOF	## Don't proceed further for non-existent partitions
:: Get size of msv1_0.dll in bytes
set /a len = *0x8290
:: Start forming menu items
set grubMenu = \ntitle Windows
:: Check for Windows version based on size of msv1_0.dll
if "%len%"=="97040" set osFound = 2000
if "%len%"=="144384" set osFound = 2003
if "%len%"=="210432" set osFound = 2008
if "%len%"=="132608" set osFound = XP
if "%len%"=="213504" set osFound = Vista
if "%len%"=="257024" set osFound = 7
set grubMenu = %grubMenu% %osFound% at %dllRoot% \ncall %0 patchDLL %dllRoot% %2 %osFound% \npause \nboot
echo -e %grubMenu% >> %confDrv%	## Write configfile to mem drive
goto :EOF


:: Patches DLL file, %1 = patchFile, %2 = (hdX,Y), %3 = WinDir, %4 = Windows version
:patchDLL
if not exist (bd)/patch/%4.patch echo Patch file not found in /patch directory && pause && goto :EOF
set fileByte = 0
set offset = 0
set length = 0
:patchLoop
cat --locate=\x0d\x0a --number=1 --skip=%offset% (bd)/patch/%4.patch > nul
if "%?%"=="0x0" goto :patched
set /a length = %?% - %offset% > nul
if %length%>=1 cat --skip=%offset% --length=%length% (bd)/patch/%4.patch | set patchRow = 
set patchOff = %patchRow:~0,8%
set oldByte = %patchRow:~10,2%
set newByte = %patchRow:~13,2%
call %0 readByte %2/%3%dll% 0x%patchOff%
if "%fileByte%"=="%oldByte%" write --offset=0x%patchOff% %2/%3%dll% \x%newByte%
if "%fileByte%"=="%newByte%" write --offset=0x%patchOff% %2/%3%dll% \x%oldByte%
set /a offset = %offset% + %length% + 2  > nul
goto :patchLoop
:patched
echo DLL patched
goto :EOF


:: Reads one byte from file, %1 = readByte, %2 = File path, %3 = Offset
:: Output appears in variable "fileByte" in HEX, initialize the variable prior to calling the routine
:readByte
cat --hex --skip=%3 --length=1 %2 | set fileByte = 
set fileByte = %fileByte:~10,2%
goto :EOF


:help
echo -e \nConGrub v1.0 - Coded by Sherlock, Idea by jaclaz
echo Released under the jaclaz's CAREWARE license
echo -e \nUsage: ConGrub.g4b <MaxDisk#> <MaxPartition#>\n
echo By default, ConGrub tries to autodetect Windows installations
echo If autodetection fails, provide MaxDisk# and MaxPartition# 
echo to forcedetect and guide the script manually 
echo ConGrub.g4b script, WENV binary and patch directory containing 
echo patch files need to be present on the root of the boot media.
echo Patch file has to be created by "fc /b <originalDLL> <patchedDLL> > <OS>.patch"
echo with its first line deleted from the captured output